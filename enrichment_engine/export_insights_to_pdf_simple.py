#!/usr/bin/env python3
"""
Simple PDF exporter for enrichment insights using reportlab
Converts JSON insights to a clean PDF report
"""
import sys
import json
from datetime import datetime

try:
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib import colors
except ImportError:
    print("Please install reportlab: pip install reportlab")
    sys.exit(1)

def load_insights(path):
    """Load insights from JSON file"""
    with open(path, 'r') as f:
        return json.load(f)

def generate_pdf(insights, output_path):
    """Generate PDF report from insights data"""
    doc = SimpleDocTemplate(output_path, pagesize=letter)
    story = []
    styles = getSampleStyleSheet()
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#2C3E50'),
        alignment=1  # Center
    )
    story.append(Paragraph("Campaign Enrichment Insights", title_style))
    story.append(Spacer(1, 0.5*inch))
    
    # Timestamp
    if 'timestamp' in insights:
        date_str = datetime.fromisoformat(insights['timestamp']).strftime('%B %d, %Y at %I:%M %p')
        story.append(Paragraph(f"<i>Generated: {date_str}</i>", styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
    
    # Query
    if 'query' in insights:
        story.append(Paragraph("<b>Search Query:</b>", styles['Heading2']))
        story.append(Paragraph(insights['query'], styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
    
    # Metrics
    if 'metrics' in insights and insights['metrics']:
        story.append(Paragraph("<b>Extracted Metrics:</b>", styles['Heading2']))
        metrics_data = []
        for metric, value in insights['metrics'].items():
            metric_name = metric.replace('_', ' ').title()
            metrics_data.append([metric_name, str(value)])
        
        metrics_table = Table(metrics_data, colWidths=[3*inch, 2*inch])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,-1), colors.HexColor('#F8F9FA')),
            ('TEXTCOLOR', (0,0), (-1,-1), colors.HexColor('#2C3E50')),
            ('ALIGN', (0,0), (-1,-1), 'LEFT'),
            ('FONTNAME', (0,0), (-1,-1), 'Helvetica'),
            ('FONTSIZE', (0,0), (-1,-1), 12),
            ('BOTTOMPADDING', (0,0), (-1,-1), 12),
            ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#E0E0E0'))
        ]))
        story.append(metrics_table)
        story.append(Spacer(1, 0.3*inch))
    
    # Insights
    if 'insights' in insights and insights['insights']:
        story.append(Paragraph("<b>Key Insights:</b>", styles['Heading2']))
        for insight in insights['insights']:
            story.append(Paragraph(f"• {insight}", styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
    
    # Sources
    if 'sources' in insights and insights['sources']:
        story.append(Paragraph("<b>Data Sources:</b>", styles['Heading2']))
        for i, source in enumerate(insights['sources'], 1):
            story.append(Paragraph(f"{i}. {source['title']}", styles['Normal']))
            if 'metrics_found' in source:
                metrics_str = ', '.join(source['metrics_found'])
                story.append(Paragraph(f"   <i>Metrics found: {metrics_str}</i>", styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
    
    # Footer
    story.append(Spacer(1, 0.5*inch))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.HexColor('#7F8C8D'),
        alignment=1
    )
    story.append(Paragraph("Generated by Open Enrichment Engine", footer_style))
    
    # Build PDF
    doc.build(story)
    print(f"✅ PDF generated successfully: {output_path}")

def main():
    if len(sys.argv) != 3:
        print("Usage: export_insights_to_pdf_simple.py <input_json> <output_pdf>")
        sys.exit(1)
    
    input_path = sys.argv[1]
    output_path = sys.argv[2]
    
    try:
        insights = load_insights(input_path)
        generate_pdf(insights, output_path)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()