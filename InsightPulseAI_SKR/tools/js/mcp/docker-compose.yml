version: '3.8'

# Production-grade Docker Compose for MCP Ecosystem
# Includes resource limits, security hardening, and monitoring

services:
  # Reverse Proxy / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mcp_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/mcp/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/mcp/proxy.conf:/etc/nginx/proxy.conf:ro
      - /etc/mcp/certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp_redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: mcp_neo4j
    restart: always
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scout Local MCP
  scout_local_mcp:
    build:
      context: ./scout_local_mcp
      dockerfile: Dockerfile
    container_name: scout_local_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - scout_data:/app/data
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Creative RAG MCP
  creative_rag_mcp:
    build:
      context: ./creative_rag_mcp
      dockerfile: Dockerfile
    container_name: creative_rag_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - creative_data:/app/data
      - qdrant_data:/app/qdrant
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.75'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Financial Analyst MCP
  financial_analyst_mcp:
    build:
      context: ./financial_analyst_mcp
      dockerfile: Dockerfile
    container_name: financial_analyst_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
      - DOCKER_HOST=/var/run/docker.sock
    volumes:
      - financial_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Voice Agent MCP
  voice_agent_mcp:
    build:
      context: ./voice_agent_mcp
      dockerfile: Dockerfile
    container_name: voice_agent_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - voice_data:/app/data
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unified MCP
  unified_mcp:
    build:
      context: ./unified_mcp
      dockerfile: Dockerfile
    container_name: unified_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - unified_data:/app/data
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Synthetic Data MCP
  synthetic_data_mcp:
    build:
      context: ./synthetic_data_mcp
      dockerfile: Dockerfile
    container_name: synthetic_data_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - synthetic_data:/app/data
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 768M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BriefVault RAG MCP
  briefvault_rag_mcp:
    build:
      context: ./briefvault_rag_mcp
      dockerfile: Dockerfile
    container_name: briefvault_rag_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - briefvault_data:/app/data
      - qdrant_data:/app/qdrant
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.75'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Deep Researcher MCP
  deep_researcher_mcp:
    build:
      context: ./deep_researcher_mcp
      dockerfile: Dockerfile
    container_name: deep_researcher_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - researcher_data:/app/data
      - qdrant_data:/app/qdrant
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Video RAG MCP
  video_rag_mcp:
    build:
      context: ./video_rag_mcp
      dockerfile: Dockerfile
    container_name: video_rag_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - video_data:/app/data
      - qdrant_data:/app/qdrant
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1.5G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Audio Analysis MCP
  audio_analysis_mcp:
    build:
      context: ./audio_analysis_mcp
      dockerfile: Dockerfile
    container_name: audio_analysis_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
    volumes:
      - audio_data:/app/data
      - qdrant_data:/app/qdrant
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.75'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shared Memory MCP
  shared_memory_mcp:
    build:
      context: ./shared_memory_mcp
      dockerfile: Dockerfile
    container_name: shared_memory_mcp
    restart: always
    environment:
      - PULSER_JWT_SECRET=${PULSER_JWT_SECRET}
      - MCP_ADMIN_USER=${MCP_ADMIN_USER}
      - MCP_ADMIN_PASS=${MCP_ADMIN_PASS}
      - LOG_HANDLER=${LOG_HANDLER}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - memory_data:/app/data
    networks:
      - mcp_network
    depends_on:
      - neo4j
      - redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5700/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for centralized logging
  loki:
    image: grafana/loki:2.9.0
    container_name: mcp_loki
    restart: always
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp_prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mcp_grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp_network
    depends_on:
      - prometheus
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  nginx_logs:
  redis_data:
  neo4j_data:
  neo4j_logs:
  scout_data:
  creative_data:
  financial_data:
  voice_data:
  unified_data:
  synthetic_data:
  briefvault_data:
  researcher_data:
  video_data:
  audio_data:
  memory_data:
  qdrant_data:
  loki_data:
  prometheus_data:
  grafana_data:

networks:
  mcp_network:
    external: true