id: preview-engine
name: Preview Engine
description: Real-time preview in device frames for mobile apps
version: 1.0.0

# Runtime configuration
type: preview.renderer
runtime: web
timeout: 30

# Input schema
input_schema:
  type: object
  required:
    - app_name
    - screens
  properties:
    app_name:
      type: string
      description: "Name of the app being previewed"
    editor_url:
      type: string
      description: "URL of the UI editor"
    screens:
      type: array
      items:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
            description: "Screen identifier"
          name:
            type: string
            description: "Human-readable screen name"
          preview_url:
            type: string
            description: "URL to preview this screen"
    device:
      type: string
      enum: [iphone, android, tablet, desktop]
      default: iphone
      description: "Device frame to use for preview"
    theme:
      type: string
      enum: [light, dark]
      default: light
      description: "Theme to use for preview"

# Output schema
output_schema:
  type: object
  required:
    - app_name
    - preview_url
    - screens
  properties:
    app_name:
      type: string
      description: "Name of the app"
    preview_url:
      type: string
      description: "URL to access the preview"
    screens:
      type: array
      items:
        type: object
        required:
          - id
          - name
          - rendered_url
        properties:
          id:
            type: string
            description: "Screen identifier"
          name:
            type: string
            description: "Human-readable screen name"
          rendered_url:
            type: string
            description: "URL of the rendered screen"
    qr_code_url:
      type: string
      description: "URL of a QR code to access preview on a device"

# Preview engine React component
component: |
  import React, { useState, useEffect } from 'react';
  import DeviceFrame from './components/DeviceFrame';
  import ScreenSelector from './components/ScreenSelector';
  import DeviceControls from './components/DeviceControls';
  import NavigationBar from './components/NavigationBar';
  import QRCode from './components/QRCode';
  
  const PreviewEngine = ({ app, screens, initialScreen, device = 'iphone', theme = 'light' }) => {
    const [activeScreen, setActiveScreen] = useState(initialScreen || screens[0]?.id);
    const [currentDevice, setCurrentDevice] = useState(device);
    const [currentTheme, setCurrentTheme] = useState(theme);
    const [isLoading, setIsLoading] = useState(true);
    const [showQRCode, setShowQRCode] = useState(false);
    
    // Get current screen data
    const currentScreenData = screens.find(s => s.id === activeScreen) || screens[0];
    const previewUrl = currentScreenData?.rendered_url || '';
    
    // Handle screen load
    useEffect(() => {
      if (previewUrl) {
        setIsLoading(true);
        
        // Simulate loading the screen
        const timer = setTimeout(() => {
          setIsLoading(false);
        }, 500);
        
        return () => clearTimeout(timer);
      }
    }, [previewUrl]);
    
    // Generate QR code URL
    const qrCodeUrl = `${window.location.origin}/qr?app=${encodeURIComponent(app.name)}&screen=${activeScreen}`;
    
    return (
      <div className={`preview-engine theme-${currentTheme}`}>
        <div className="preview-header">
          <h2>{app.name} Preview</h2>
          <DeviceControls 
            device={currentDevice}
            onDeviceChange={setCurrentDevice}
            theme={currentTheme}
            onThemeChange={setCurrentTheme}
            onShowQRCode={() => setShowQRCode(true)}
          />
        </div>
        
        <div className="preview-content">
          <ScreenSelector 
            screens={screens}
            activeScreen={activeScreen}
            onSelectScreen={setActiveScreen}
          />
          
          <div className="device-frame-container">
            <DeviceFrame 
              device={currentDevice}
              isLoading={isLoading}
            >
              {!isLoading && (
                <iframe
                  src={previewUrl}
                  title={`Preview of ${currentScreenData.name}`}
                  className="preview-iframe"
                />
              )}
            </DeviceFrame>
            
            <NavigationBar 
              screens={screens}
              activeScreen={activeScreen}
              onNavigate={setActiveScreen}
            />
          </div>
          
          <div className="preview-info">
            <h3>{currentScreenData.name}</h3>
            <p>Screen ID: {currentScreenData.id}</p>
          </div>
        </div>
        
        {showQRCode && (
          <div className="qr-code-modal">
            <div className="qr-code-content">
              <button 
                className="close-button"
                onClick={() => setShowQRCode(false)}
              >
                Ã—
              </button>
              <h3>Scan to preview on your device</h3>
              <QRCode url={qrCodeUrl} />
              <p className="qr-help-text">
                Scan this QR code with your device to preview the app
              </p>
            </div>
          </div>
        )}
      </div>
    );
  };
  
  export default PreviewEngine;

# Device frame component
device_frame_component: |
  import React from 'react';
  import './DeviceFrame.css';
  
  const DeviceFrame = ({ device, isLoading, children }) => {
    const getDeviceClass = () => {
      switch (device) {
        case 'iphone':
          return 'device-iphone';
        case 'android':
          return 'device-android';
        case 'tablet':
          return 'device-tablet';
        case 'desktop':
          return 'device-desktop';
        default:
          return 'device-iphone';
      }
    };
    
    return (
      <div className={`device-frame ${getDeviceClass()}`}>
        <div className="device-screen">
          {isLoading ? (
            <div className="loading-spinner">
              <div className="spinner"></div>
              <p>Loading preview...</p>
            </div>
          ) : (
            children
          )}
        </div>
        
        {device === 'iphone' && (
          <div className="iphone-notch"></div>
        )}
        
        {(device === 'iphone' || device === 'android') && (
          <div className="home-indicator"></div>
        )}
      </div>
    );
  };
  
  export default DeviceFrame;

# Server for the preview engine
server_setup: |
  import express from 'express';
  import path from 'path';
  import fs from 'fs';
  import React from 'react';
  import ReactDOMServer from 'react-dom/server';
  import QRCode from 'qrcode';
  import PreviewEngine from './components/PreviewEngine';
  
  // Create Express server
  const app = express();
  const PORT = process.env.PORT || 3001;
  
  // Serve static files
  app.use(express.static(path.join(__dirname, 'public')));
  
  // API endpoint to get rendered screens
  app.get('/api/screens', (req, res) => {
    const { app_name } = req.query;
    
    try {
      // In a real implementation, this would retrieve rendered screens
      // For now, return simulated data
      const screens = [
        { id: 'home', name: 'Home', rendered_url: '/preview/home' },
        { id: 'profile', name: 'Profile', rendered_url: '/preview/profile' }
      ];
      
      res.json({ screens });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  
  // API endpoint to generate QR code
  app.get('/api/qrcode', async (req, res) => {
    const { url } = req.query;
    
    try {
      // Generate QR code
      const qrCodeDataURL = await QRCode.toDataURL(url);
      res.json({ qrCodeUrl: qrCodeDataURL });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  
  // Screen preview endpoint
  app.get('/preview/:screenId', (req, res) => {
    const { screenId } = req.params;
    
    // In a real implementation, this would render the screen
    // For now, return a simple HTML page
    res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Preview: ${screenId}</title>
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
              margin: 0;
              padding: 0;
              background-color: #f5f5f5;
            }
            
            .screen {
              padding: 16px;
            }
            
            .header {
              background-color: #2196F3;
              color: white;
              padding: 16px;
              font-size: 18px;
              font-weight: bold;
              text-align: center;
            }
            
            .content {
              padding: 16px;
              background-color: white;
              border-radius: 8px;
              margin-top: 16px;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            
            .button {
              background-color: #2196F3;
              color: white;
              border: none;
              padding: 12px 16px;
              border-radius: 4px;
              font-size: 16px;
              margin-top: 16px;
              width: 100%;
              cursor: pointer;
            }
          </style>
        </head>
        <body>
          <div class="screen">
            <div class="header">${screenId.charAt(0).toUpperCase() + screenId.slice(1)}</div>
            <div class="content">
              <p>This is a preview of the ${screenId} screen.</p>
              <p>In a real app, this would be a fully interactive screen.</p>
              <button class="button">Sample Button</button>
            </div>
          </div>
        </body>
      </html>
    `);
  });
  
  // Main preview engine page
  app.get('/', (req, res) => {
    const { app_name, device = 'iphone', theme = 'light', screen = 'home' } = req.query;
    
    // Simulated app and screens data
    const app = { name: app_name || 'Sample App' };
    const screens = [
      { id: 'home', name: 'Home', rendered_url: '/preview/home' },
      { id: 'profile', name: 'Profile', rendered_url: '/preview/profile' }
    ];
    
    const html = ReactDOMServer.renderToString(
      <PreviewEngine 
        app={app}
        screens={screens}
        initialScreen={screen}
        device={device}
        theme={theme}
      />
    );
    
    res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${app.name} Preview</title>
          <link rel="stylesheet" href="/styles.css">
        </head>
        <body>
          <div id="root">${html}</div>
          <script src="/bundle.js"></script>
        </body>
      </html>
    `);
  });
  
  // Start the server
  app.listen(PORT, () => {
    console.log(`Preview Engine server running on port ${PORT}`);
  });

# Execution steps
steps:
  # Start the preview engine server
  - action: run_code
    code: |
      const { app_name, editor_url, screens, device = 'iphone', theme = 'light' } = input;
      
      // In a real implementation, this would start the preview engine server
      // and return the URL to access it
      
      // For now, we'll simulate the output
      const previewPort = 3001;
      const previewUrl = `http://localhost:${previewPort}?app=${encodeURIComponent(app_name)}&device=${device}&theme=${theme}`;
      
      // Generate rendered URLs for each screen
      const renderedScreens = screens.map(screen => ({
        ...screen,
        rendered_url: `http://localhost:${previewPort}/preview/${screen.id}`
      }));
      
      // Generate QR code URL
      const qrCodeUrl = `http://localhost:${previewPort}/api/qrcode?url=${encodeURIComponent(previewUrl)}`;
      
      // Return the result
      return {
        app_name,
        preview_url: previewUrl,
        screens: renderedScreens,
        qr_code_url: qrCodeUrl
      };
  
  # Log the result
  - action: log
    message: "Preview Engine started for app '{{ app_name }}' at {{ preview_url }}"

# Lifecycle hooks
on_start:
  - action: run_code
    code: |
      const { trace } = await import('../packages/appgenie/strategies/devstral.js');
      trace('agent.preview-engine.start', {
        agent: 'preview-engine',
        app_name: input.app_name,
        device: input.device || 'iphone',
        theme: input.theme || 'light',
        screen_count: input.screens.length,
        timestamp: new Date().toISOString()
      });

on_finish:
  - action: run_code
    code: |
      const { trace } = await import('../packages/appgenie/strategies/devstral.js');
      trace('agent.preview-engine.finish', {
        agent: 'preview-engine',
        app_name: output.app_name,
        preview_url: output.preview_url,
        qr_code_url: output.qr_code_url,
        screens_rendered: output.screens.length,
        timestamp: new Date().toISOString()
      });

# Post-processing hooks
post_process:
  - action: next_step
    agent: deployer
    with:
      app_name: "{{ app_name }}"
      preview_url: "{{ preview_url }}"
      screens: "{{ screens }}"