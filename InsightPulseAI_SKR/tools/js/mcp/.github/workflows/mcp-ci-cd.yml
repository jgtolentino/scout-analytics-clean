name: MCP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: insightpulseai/mcp

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit Python security scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install linting tools
        run: |
          pip install black flake8 mypy pylint
      
      - name: Run Black formatter check
        run: black --check .
      
      - name: Run Flake8 linter
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run MyPy type checker
        run: mypy . --ignore-missing-imports || true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          scout_local_mcp,
          creative_rag_mcp,
          financial_analyst_mcp,
          voice_agent_mcp,
          unified_mcp,
          synthetic_data_mcp,
          briefvault_rag_mcp,
          deep_researcher_mcp,
          video_rag_mcp,
          audio_analysis_mcp,
          shared_memory_mcp
        ]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run unit tests
        run: |
          cd ${{ matrix.service }}
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.service }}/coverage.xml
          name: ${{ matrix.service }}
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-format, unit-tests]
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/testpassword
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install test dependencies
        run: |
          pip install pytest pytest-asyncio httpx pyyaml
      
      - name: Set test environment
        run: |
          echo "PULSER_JWT_SECRET=test-secret" >> $GITHUB_ENV
          echo "MCP_ADMIN_USER=admin" >> $GITHUB_ENV
          echo "MCP_ADMIN_PASS=test-password" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=testpassword" >> $GITHUB_ENV
          echo "NEO4J_PASSWORD=testpassword" >> $GITHUB_ENV
      
      - name: Run integration tests
        run: |
          python test_suite.py
      
      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: |
            test_report.json
            htmlcov/

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [
          scout_local_mcp,
          creative_rag_mcp,
          financial_analyst_mcp,
          voice_agent_mcp,
          unified_mcp,
          synthetic_data_mcp,
          briefvault_rag_mcp,
          deep_researcher_mcp,
          video_rag_mcp,
          audio_analysis_mcp,
          shared_memory_mcp
        ]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/staging/
          # or docker-compose -f docker-compose.staging.yml up -d
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'MCP Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production environment
        run: |
          echo "Deploying to production..."
          # Add actual production deployment commands
          # kubectl apply -f k8s/production/
          # or docker-compose -f docker-compose.production.yml up -d
      
      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          # Add verification commands
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: MCP Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated deployment from commit ${{ github.sha }}
            - View full changes: ${{ github.event.compare }}
          draft: false
          prerelease: false

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Locust
        run: |
          pip install locust
      
      - name: Run load tests
        run: |
          # Run load tests against staging
          echo "Running performance tests..."
          # locust -f load_tests.py --host=https://staging.mcp.insightpulseai.com --headless -u 100 -r 10 -t 5m
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: locust_report.html